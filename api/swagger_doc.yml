swagger: '2.0'
info:
  description: |
    ONB api
  version: 0.0.0
  title: ONB api

host: 127.0.0.1:5000
basePath: /
schemes:
 - http
 - https
produces:
  - application/json
consumes:
  - application/json

tags:
- name: models
  description: Game models
- name: user
  description: User endpoints
- name: battle
  description: Create battles and armies
- name: image
  description: Image upload and download
- name: message
  description: Send and receive messages

securityDefinitions:
  jwt_auth:
    type: apiKey
    name: Authorization
    in: header

paths:
# Get game models
  /model/table:
    get:
      tags:
      - models
      summary: Get game dammage table
      operationId: getTableModel
      responses:
        200:
          description: Success
  /model/{modelName}:
    parameters:
    - name: modelName
      in: path
      description: Name of the model
      required: true
      type: string
    get:
      tags:
      - models
      summary: Get models list
      operationId: getModelsList
      parameters:
      - in: body
        name: filters
        description: List filters
        required: true
        schema:
          $ref: '#/definitions/ListFilters'
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Model"
    post:
      tags:
      - models
      summary: Create a new model
      operationId: createModel
      parameters:
      - in: body
        name: modelObject
        description: Model object that will be created
        required: true
        schema:
          $ref: '#/definitions/Model'
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Model"
        400:
          description: Bad request
      security:
      - jwt_auth: []

  /model/{modelName}/{id}:
    parameters:
    - name: modelName
      in: path
      description: Name of the model
      required: true
      type: string
    - name: id
      in: path
      description: Id of the model object
      required: true
      type: integer
    get:
      tags:
      - models
      summary: Get model object by id
      operationId: getModelById
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Model"
        404:
          description: Not found
    put:
      tags:
      - models
      summary: Update a model
      operationId: updateModel
      parameters:
      - in: body
        name: modelObject
        description: New model values
        required: true
        schema:
          $ref: '#/definitions/Model'
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Model"
        400:
          description: Bad request
        404:
          description: Not found
      security:
      - jwt_auth: []
    delete:
      tags:
      - models
      summary: delete a model
      operationId: deleteModel
      responses:
        200:
          description: Success
        404:
          description: Not found
      security:
      - jwt_auth: []
  /model/{modelName}/schemas:
    parameters:
    - name: modelName
      description: Name of the model
      in: path
      required: true
      type: string
    get:
      tags:
      - models
      summary: Get the schema of the model, sub-models and inherited models
      operationId: getModelSchemas
      parameters:
      - in: body
        name: modelObject
        required: true
        schema:
          type: object
          properties:
            submodels:
              type: boolean
              default: true
            inheritedmodels:
              type: boolean
              default: true
      responses:
        200:
          description: Success
          schema:
            type: object
            additionalProperties:
              type: object

# User endpoints
  /user/auth:
    get:
      tags:
      - user
      summary: Log-in
      operationId: userAuth
      parameters:
      - in: body
        name: userLoginInfos
        required: true
        schema:
            $ref: "#/definitions/UserLoginInfos"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Log-in error: Bad request or invalid credentials"
    delete:
      tags:
      - user
      summary: Log-out and revoke all JWT tokens
      operationId: userLogout
      responses:
        200:
          description: Success
      security:
      - jwt_auth: []
  /user/{id}:
    parameters:
    - name: id
      in: path
      description: Id of the user
      required: true
      type: integer
    get:
      tags:
      - user
      summary: Get user profile
      operationId: userProfile
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Log-in error: Bad request or invalid credentials"
  /user:
    get:
      tags:
      - user
      summary: Get logged user profile and settings
      operationId: userInfos
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
      security:
      - jwt_auth: []
    post:
      tags:
      - user
      summary: Create a new user
      operationId: createUser
      parameters:
      - in: body
        name: userLoginInfos
        required: true
        schema:
            $ref: "#/definitions/UserLoginInfos"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        400:
          description: Bad request
        409:
          description: Username already taken
    put:
      tags:
      - user
      summary: Update user profile and settings
      operationId: updateUser
      parameters:
      - in: body
        name: userLoginInfos
        required: true
        description: Only profile and settings fields are allowed
        schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        400:
          description: Bad request
      security:
      - jwt_auth: []
  /user/password:
    post:
      tags:
      - user
      summary: Update user password
      operationId: updateUserPassword
      parameters:
      - in: body
        name: userPassword
        required: true
        description: Old and new password
        schema:
            type: object
            properties:
              old_password:
                type: string
              new_password:
                type: string
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        400:
          description: Bad request
      security:
      - jwt_auth: []
  /user/anonymous:
    get: 
      tags:
      - user
      summary: Get new anonymous user
      operationId: createAnonymous
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
    post: 
      tags:
      - user
      summary: Claim anonymous account to make it a regular account
      operationId: claimAnonymous
      parameters:
      - in: body
        name: userLoginInfos
        required: true
        schema:
            $ref: "#/definitions/UserLoginInfos"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/User"
        400:
          description: Bad request
        409:
          description: Username already taken
      security:
      - jwt_auth: []

# Battles
  /battle:
    post:
      tags:
      - battle
      summary: Create a new battle
      operationId: createNewBattle
      parameters:
      - in: body
        name: battleSettings
        required: true
        schema:
            $ref: "#/definitions/Battle"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Battle"
        400:
          description: Bad request
      security:
      - jwt_auth: []
  /battle/{id}:
    parameters:
    - name: id
      in: path
      description: Id of the battle
      required: true
      type: integer
    get:
      tags:
      - battle
      summary: Get battle infos
      operationId: getBattle
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Battle"
        404:
          description: Not found
      security:
      - jwt_auth: []
    delete:
      tags:
      - battle
      summary: Delete a battle
      operationId: deleteBattle
      responses:
        200:
          description: Success
        404:
          description: Not found
      security:
      - jwt_auth: []
    put:
      tags:
      - battle
      summary: Update battle settings
      operationId: updateBattle
      parameters:
      - in: body
        name: battleSettings
        required: true
        schema:
            $ref: "#/definitions/Battle"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Battle"
      security:
      - jwt_auth: []
  /battle/{id}/user/{id}:
    parameters:
    - name: id
      in: path
      description: Id of the battle
      required: true
      type: integer
    put:
      tags:
      - battle
      summary: Allow an user to access to the battle (restricted to the owner)
      operationId: addUserToBattle
      responses:
        200:
          description: Success
      security:
      - jwt_auth: []
    delete:
      tags:
      - battle
      summary: Remove an user's access to the battle (restricted to the owner)
      operationId: removeUserFromBattle
      responses:
        200:
          description: Success
      security:
      - jwt_auth: []
  /battle/{id}/armies:
    parameters:
    - name: id
      in: path
      description: Id of the battle
      required: true
      type: integer
    get:
      tags:
      - battle
      summary: Get battle armies
      operationId: getBattleArmies
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Army"
      security:
      - jwt_auth: []
    post:
      tags:
      - battle
      summary: Create a new army
      operationId: createArmy
      parameters:
      - in: body
        name: army
        required: true
        schema:
          $ref: "#/definitions/Army"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Army"
        400:
          description: Bad request
      security:
      - jwt_auth: []
  /army/{id}:
    parameters:
    - name: id
      in: path
      description: Id of the army
      required: true
      type: integer
    get:
      tags:
      - battle
      summary: Get army
      operationId: getArmy
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Army"
      security:
      - jwt_auth: []
    put:
      tags:
      - battle
      summary: Update army name and alignment
      operationId: updateArmy
      parameters:
      - in: body
        name: army
        required: true
        schema:
          $ref: "#/definitions/Army"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/Army"
        400:
          description: Bad request
      security:
      - jwt_auth: []
    delete:
      tags:
      - battle
      summary: Remove an army
      operationId: removeArmy
      responses:
        200:
          description: Success
      security:
      - jwt_auth: []
  /army/{id}/unit/{unit_id}:
    parameters:
    - name: id
      in: path
      description: Id of the army
      required: true
      type: integer
    - name: unit_id
      in: path
      description: Id of the unit
      required: true
      type: integer
    put:
      tags:
      - battle
      summary: Set unit count in army
      operationId: updateArmyUnit
      parameters:
      - in: body
        name: unitCount
        required: true
        schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Success
      security:
      - jwt_auth: []
    delete:
      tags:
      - battle
      summary: Remove an unit from an army
      operationId: removeArmyUnit
      responses:
        200:
          description: Success
      security:
      - jwt_auth: []

# Upload images
  /image:
    post:
      tags:
      - image
      summary: Upload an image
      operationId: uploadImage
      consumes:
         - multipart/form-data
      parameters:
         - in: formData
           name: image
           type: file
           description: The image to upload.
      responses:
        200:
          description: Success
          schema:
            type: integer
            description: Image id
        400:
          description: Bad request
      security:
      - jwt_auth: []
  /image/{id}:
    parameters:
    - name: id
      in: path
      description: Id of the image
      required: true
      type: integer
    get:
      tags:
      - image
      summary: Get uploaded image
      operationId: getImage
      produces:
         - image/*
      responses:
        200:
          description: Success, return the image
        404:
          description: Image not found
    delete:
      tags:
      - image
      summary: Delete an image
      operationId: deleteImage
      responses:
        200:
          description: Success
        404:
          description: Image not found
      security:
      - jwt_auth: []

# Messaging system
  /message/{user_id}:
    parameters:
    - name: user_id
      in: path
      description: Id of the receiver
      required: true
      type: integer
    post:
      tags:
      - message
      summary: Send a new message
      operationId: sendMessage
      parameters:
      - in: body
        name: messageContent
        required: true
        schema:
            type: object
            parameters:
              content:
                type: string
      responses:
        200:
          description: Success
        400:
          description: Bad request
        404:
          description: Receiver does not exist
      security:
      - jwt_auth: []
    get:
      tags:
      - message
      summary: Get message sended to an user, sorted by decreasing date
      operationId: getMessages
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: "#/definitions/Message"
        404:
          description: Receiver does not exist
      security:
      - jwt_auth: []
  /message:
    get:
      tags:
      - message
      summary: Get all conversations
      operationId: getMessages
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              type: object
              properties:
                user:
                  $ref: "#/definitions"
                last_message:
                  $ref: "#/definitions"
      security:
      - jwt_auth: []



definitions:
  Model:
    type: object
    properties:
      id:
        type: integer
      owner_id:
          type: integer
      type:
        type: integer
      is_official:
        type: boolean
      is_public:
        type: boolean
      is_generated:
        type: boolean
      model:
        type:
          object
        properties:
          name:
            type: string
          summary:
            type: string
  UserLoginInfos:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
  User:
    type: object
    properties:
      id:
        type: integer
      username:
        type: string
      is_anonymous:
        type: boolean
      auth_token:
        description: JWT for logged users
        type: string
      profile:
        type: object
        properties:
          avatar_id:
            type: integer
          description:
            type: string
      settings:
        type: object
        description: User settings, visible only by the user itself
  ListFilters:
    type: object
    properties:
      only_official:
        type: boolean
        default: true
      pagination:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      owner:
        type: integer
      public_only:
        type: boolean
        default: true
      fields:
        type: object
        additionalProperties:
          type: string
          description: Filter by object exposed properties. Type can be string, but also integer, or boolean
  Battle:
    type: object
    properties:
      id:
        type: integer
      universe:
        type: string
        description: Universe from which creature should come from, or null to allow all universes
      battleground:
        type: string
        description: battleground type (ground, space, ocean...)
      allow_cross_alignment:
        type: boolean
        default: false
        description: If true, armies can have units with differents alignments
      name:
        type: string
      scenario:
        description: Description, scenario and objectives
        type: string
      army_maximum_cost:
        type: integer
        minimum: 1
      owner_id:
        type: integer
      players:
        type: array
        description: All players can add and delete armies
        items:
          type: integer
      armies:
        type: array
        items:
          $ref: "#/definitions/Army"
  Army:
    type: object
    properties:
      id:
        type: integer
      battle_id:
        type: integer
      cost:
        type: integer
        description: Total cost of all units. Not stored, but computed at runtime
      name:
        type: string
      alignment:
        type: string
        description: If not null, all units must have this alignment
      units:
        type: array
        items:
          type: object
          properties:
            unit:
              description: short version of unit model
              $ref: "#/definitions/Model"
  Message:
    sended_at:
      type: datetime
    content:
      type: string

externalDocs:
  description: Find out more about Onb
  url: https://github.com/webalorn/onb